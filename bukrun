#!/bin/bash

######################################################################

CONTAINER_PROJECT="${CONTAINER_PROJECT:-environment2}"
CONTAINER_NAME="${CONTAINER_NAME:-symfony}"

######################################################################

GREEN='\033[0;32m'
LIGHT_BLUE='\033[1;34m'
LIGHT_GREEN='\033[1;32m'
LIGHT_MAGENTA='\033[0;95m'
LIGHT_RED='\033[1;31m'
RESET=$(tput sgr0)

######################################################################

check_executable() {
    if ! command -v "$1" >/dev/null 2>&1; then
        echo -e "\n${LIGHT_RED}✗ The required executable '$1' is not present to run the command.${RESET}" >&2
        exit 2
    fi
}

trim() {
    echo "$1" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
}

get_changed_files_from_master() {
    git diff --name-only master...
}

######################################################################

command_ecs() {
    EXECUTABLE='vendor/bin/ecs'
    check_executable $EXECUTABLE

    declare -n commands=$1
    command_line_parameters=$2

    commands+=("echo -e \"\n${LIGHT_BLUE}Running PHP Easy Coding Standard${RESET}\"")
    commands+=("$EXECUTABLE check --clear-cache --config=ecs.php $command_line_parameters")
}

command_md() {
    EXECUTABLE='vendor/bin/phpmd'
    check_executable $EXECUTABLE

    declare -n commands=$1
    command_line_parameters=$2

    commands+=("echo -e \"\n${LIGHT_BLUE}Running PHP Mess Detector${RESET}\"")
    commands+=("$EXECUTABLE $command_line_parameters text phpmd_ruleset.xml --exclude 'src/Migrations/*,src/DataFixtures/*' -vvv")
}

command_stan() {
    EXECUTABLE='vendor/bin/phpstan'
    check_executable $EXECUTABLE

    declare -n commands=$1
    command_line_parameters=$2

    commands+=("echo -e \"\n${LIGHT_BLUE}Running PHP Static Analysis Tool${RESET}\"")
    # "${LIGHT_MAGENTA}- Warming up cache ...${RESET}"
    # "bin/console cache:warmup"
    # "${LIGHT_MAGENTA}- Clear previous cached results ...${RESET}"
    # "vendor/bin/phpstan clear-result-cache"
    commands+=("echo -e \"${LIGHT_MAGENTA}- Analyzing with PHPSTAN ...${RESET}\"")
    commands+=("XDEBUG_MODE=off $EXECUTABLE analyze $command_line_parameters --level 9 -c phpstan.neon.dist --debug -vv")
}

command_linteronchanges() {
    echo -e "\n${LIGHT_BLUE}Running linters on changed files${RESET}"

    declare -n commands=$1
    command_line_parameters=$2

    readarray -t files_changed < <(get_changed_files_from_master)

    if [[ ${#files_changed[@]} -eq 0 ]]; then
        echo -e "\n${LIGHT_RED}✗ There is no files changed in this branch compared to master.${RESET}" >&2
        return 0
    fi

    linters_functions=("command_ecs" "command_md" "command_stan")

    for linter_func in "${linters_functions[@]}"; do
        for file in "${files_changed[@]}"; do
            "$linter_func" "$commands_array_name" "$command_line_parameters"
        done
    done
}

command_linteronfile() {
    commands_array_name=$1
    command_line_parameters=$2

    linters_functions=("command_ecs" "command_md" "command_stan")

    for linter_func in "${linters_functions[@]}"; do
        "$linter_func" "$commands_array_name" "$command_line_parameters"
    done
}

command_linters() {
    EXECUTABLE='linters.sh'
    check_executable $EXECUTABLE

    declare -n commands=$1
    command_line_parameters=$2

    commands+=("echo -e \"\n${LIGHT_BLUE}Running full Buk package of Linters${RESET}\"")
    commands+=("XDEBUG_MODE=off ./$EXECUTABLE")
}

command_test() {
    EXECUTABLE='bin/phpunit'
    check_executable $EXECUTABLE

    declare -n commands=$1
    command_line_parameters=$2

    commands+=("echo -e \"\n${LIGHT_BLUE}Running PHPUnit${RESET}\"")
    commands+=("$EXECUTABLE $command_line_parameters --testdox --colors=always --no-coverage --no-logging")
}

command_coverage() {
    EXECUTABLE='bin/phpunit'
    check_executable $EXECUTABLE

    declare -n commands=$1
    readarray -t command_line_parameters < <(bash -c "printf '%s\n' $2")

    tests_to_run="${command_line_parameters[0]}"
    results_to_filter="${command_line_parameters[1]}"

    TEMP_FILE=$(mktemp)
    trap 'rm -f "$TEMP_FILE"' EXIT

    PHPUNIT_OPTIONS="--coverage-text --colors=never --no-logging --no-interaction --disallow-test-output --disallow-resource-usage"

    commands+=("echo -e \"\n${LIGHT_BLUE}Running PHPUnit - COVERAGE${RESET}\"")
    commands+=("echo -e \"Running tool and getting the coverage data ...\"")
    commands+=("XDEBUG_MODE=coverage $EXECUTABLE $PHPUNIT_OPTIONS $tests_to_run > \"$TEMP_FILE\"")
    commands+=("echo -e \"Filtering the coverage data for ${results_to_filter} ...\"")
    commands+=("grep -A1 \"$results_to_filter\" \"${TEMP_FILE}\"")
}

command_teststop() {
    EXECUTABLE='bin/phpunit'
    check_executable $EXECUTABLE

    declare -n commands=$1
    command_line_parameters=$2

    commands+=("echo -e \"\n${LIGHT_BLUE}Running PHPUnit (stop on error/failure)${RESET}\"")
    commands+=("$EXECUTABLE $command_line_parameters --testdox --colors=always --no-coverage --no-logging --stop-on-failure --verbose")
}

######################################################################

show_help() {
           echo
           echo -e "Use: bukrun <command> [...]"
           echo
           echo -e "Use one of the following commands:"
           echo
           echo -e "  coverage TARGET      - test coverage (BETA)"
           echo -e "  ecs TARGET           - PHP Easy Coding Standard"
           echo -e "  linteronchanges      - ECS+MD+Stan on modified files compared to master"
           echo -e "  linteronfile TARGET  - ECS+MD+Stan"
           echo -e "  linters TARGET       - linters.sh"
           echo -e "  md TARGET            - PHP Mess Detector"
           echo -e "  stan TARGET          - PHP Static Analysis Tool"
           echo -e "  test TARGET          - PHPUnit"
           echo -e "  teststop TARGET      - PHPUnit stopping at first error"
           echo
}

######################################################################

process_command() {
    commands_array_name=$1
    command=$2
    command_line_parameters=$3

    "$command" "$commands_array_name" "$command_line_parameters"
}

prepare_docker_command() {
    command_line=$1

    echo "docker compose -p ${CONTAINER_PROJECT} exec ${CONTAINER_NAME} bash -c '${command_line}'"
}

run_command() {
    command="command_$1"
    docker=$2
    command_line_parameters=${@:3}
    commandsToRun=()

    if ! declare -F "$command" > /dev/null; then
        echo -e "\n${LIGHT_RED}*** Unknown command: $COMMAND ***${RESET}"
        show_help
        exit 1
    fi

    process_command commandsToRun "$command" "$command_line_parameters"

    ######################################################################

    for cmd in "${commandsToRun[@]}"; do
        command_line=$(trim "${cmd}")

        if [[ "$docker" -eq 0 ]]; then
            # Print a dockerized message
            command_line=$(prepare_docker_command "${command_line}")
        fi

        if [[ -n "$command_line" ]]; then
            if [[ ! $command_line == echo* ]]; then
                echo -e "COMMAND: ${command_line}"
            fi

            bash -c "${command_line}"
        fi
    done
}

######################################################################

# Main script

DOCKER=1    # False
COMMAND="$1"
shift # Remove the parameter

if [[ "$COMMAND" == "docker" || "$COMMAND" == "--docker" || "$COMMAND" == "-d" ]]; then
    DOCKER=0    # True
    COMMAND="$1"
    shift
fi

COMMAND_LINE_PARAMETERS=$@

run_command "$COMMAND" "$DOCKER" $COMMAND_LINE_PARAMETERS

######################################################################

exit 0
